/*
 * This file is part of the Reproducible Open Benchmarks for Data Analysis
 * Platform (ROB).
 *
 * Copyright (C) [2019-2020] NYU.
 *
 * ROB is free software; you can redistribute it and/or modify it under the
 * terms of the MIT License; see LICENSE file for more details.
 */

import { SHOW_HOMEPAGE } from '../actions/App';
import { LOGOUT_SUCCESS } from '../actions/Auth';
import {
    FETCH_BENCHMARK_START, FETCH_LEADERBOARD_ERROR, FETCH_LEADERBOARD_START,
    FETCH_LEADERBOARD_SUCCESS
} from '../actions/Benchmark';


 /**
  * The benchmark leaderboard state contains the current benchmark ranking as
  * well as information about resources that were generated by as additional
  * metrics for the runs in the leaderboard.
  */
const INITIAL_STATE = {
    fetchError: null,
    isFetching: false,
    outputs: null,
    pollInterval: -1,
    postProcRun: null,
    ranking: null,
    schema: null
}


const leaderboard = (state = INITIAL_STATE, action) => {
    switch (action.type) {
        case FETCH_LEADERBOARD_ERROR:
            return {
                ...state,
                isFetching: false,
                fetchError: action.payload,
                pollInterval: -1
            };
        case FETCH_LEADERBOARD_START:
            return {...state, isFetching: true};
        case FETCH_LEADERBOARD_SUCCESS:
            let pollInterval = 10000;
            const postProcRun = action.payload.postproc;
            if (postProcRun != null) {
                if ((postProcRun.state === 'PENDING') || (postProcRun.state === 'RUNNING')) {
                    pollInterval = 1000;
                }
            }
            return {
                ...state,
                ranking: action.payload.ranking,
                outputs: action.payload.outputs,
                postProcRun,
                schema: action.payload.schema,
                isFetching: false,
                fetchError: null,
                pollInterval
            };
        case SHOW_HOMEPAGE:
        case LOGOUT_SUCCESS:
        case FETCH_BENCHMARK_START:
            return {
                ...state,
                isFetching: false,
                fetchError: null,
                pollInterval: -1,
                ranking: null,
                schema: null,
                outputs: null,
                postProcRun: null
            };
        default:
            return state
     }
 }

 export default leaderboard;
